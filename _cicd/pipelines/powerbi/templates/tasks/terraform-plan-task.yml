parameters:
  - name: AzureServiceConnectionName
    type: string
  - name: BackendResourceGroupName
    type: string
  - name: BackendStorageAccountName
    type: string
  - name: BackendContainerName
    type: string
  - name: EnvironmentNamePrefix
    type: string
  - name: terraformRootFolder
    type: string
  - name: artifactName
    type: string
  - name: terraformVersion
    type: string

steps:
  - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
    displayName: Install terraform version ${{ parameters.terraformVersion }}
    inputs:
      terraformVersion: ${{ parameters.terraformVersion }}
      installLatest: false
      useSpecificVersion: true

  - task: TerraformTaskV4@4
    displayName: Terraform init
    inputs:
      command: init
      backendServiceArm: ${{ parameters.AzureServiceConnectionName  }}
      backendAzureRmResourceGroupName: ${{ parameters.BackendResourceGroupName }}
      backendAzureRmStorageAccountName: "${{ parameters.BackendStorageAccountName }}"
      backendAzureRmContainerName: "${{ parameters.BackendContainerName }}"
      backendAzureRmKey: terraform.tfstate
      workingDirectory: "${{ parameters.terraformRootFolder }}"

  - task: TerraformTaskV4@4
    displayName: Terraform validate
    inputs:
      command: validate
      workingDirectory: "${{ parameters.terraformRootFolder }}"

  - task: TerraformTaskV4@4
    displayName: Terraform plan
    inputs:
      command: plan
      environmentServiceNameAzureRM: ${{ parameters.AzureServiceConnectionName  }}
      workingDirectory: "${{ parameters.terraformRootFolder }}"
      commandOptions: "-out=${{ parameters.EnvironmentNamePrefix }}.plan -var-file=vars/${{ parameters.EnvironmentNamePrefix }}.tfvars"

  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: "${{ parameters.terraformRootFolder }}"
      artifact: "${{ parameters.artifactName }}"
