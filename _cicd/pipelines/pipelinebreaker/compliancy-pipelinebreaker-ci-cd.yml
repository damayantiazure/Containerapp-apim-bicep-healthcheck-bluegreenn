parameters:
- name: UpdateInfraDev
  displayName: Should Infra for Dev be Updated?
  type: boolean
  default: false
- name: UpdateSecretsDev
  displayName: Should Keyvault Secrets in Dev be Updated as well?
  type: boolean
  default: false

trigger:
- main

resources:
  repositories:
  - repository: innersourceTemplates
    type: git
    name: Innersource/AzDo-pipeline-starters
    ref: refs/heads/master

name: 1.0.$(Rev:r)

variables:
# Base Name for Azure Function used for naming convention
- name: FunctionAppBaseName
  value: pipelinebreakerv2
- name: ManagedIdentityAmount
  value: 5
# Global/common Variables for whole pipeline
- template: vars/global.yml
- template: ../sharedvars/global.yml
- template: ../sharedvars/variables-conditions.yml
  parameters:
    UpdateInfraDev: ${{ parameters.UpdateInfraDev }}
    UpdateSecretsDev: ${{ parameters.UpdateSecretsDev }}
# Cross-pipeline used secrets from Library
- group: AZDO-COMPLIANCY

stages:
#######################################################
#  BUILD
#######################################################
- template: ../../templates/stage/build-function-stage.yml
  parameters:
    pipelineVariables: ../../pipelines/pipelinebreaker/vars/global.yml
    env:
      token: $(azdoPatDev)
    startAzurite: true

#######################################################
#  DEV
#######################################################
- template: ../../templates/stage/stage-deploy-functionapp-infra.yml
  parameters:
    # Stage-level parameters
    StageId: InfraDev
    displayName: DEV - Infra
    dependsOn: []
    condition: eq(variables.DeployInfraToDev, true)
    environment: ${{ variables.environmentCheckDev }} # from global
    # Template-specific parameters
    StageEnv: dev
    FunctionAppNameBase: ${{ variables.FunctionAppBaseName }}
    # Function App Plan parameters
    MaxBurst: 20
    CountOfIdentities: ${{ variables.ManagedIdentityAmount }}

- stage: SecretsDev
  displayName: DEV - Secrets
  dependsOn: InfraDev
  condition: and(succeeded(), eq(variables.DeploySecretsToDev, true))
  variables:
  - template: vars/dev.yml
  - template: ../sharedvars/dev.yml
  jobs:
  - template: ../../templates/job/secrets-job.yml
    parameters:
      agentPool: $(agentPool)
      keyVaultName: $(keyVaultName)
      azureSubscription: ${{variables.azureSubscription}}
      secrets: 
      - name: azdoPat 
        value: $azdoPat
      - name: clientSecret
        value: $clientSecret
      - name: tableStorageConnectionString
        value: $tableStorageConnectionString
      - name: extensionSecret 
        value: $extensionSecret
      env: 
        azdoPat: $(azdoPatDev)
        clientSecret: $(clientSecret)
        tableStorageConnectionString: $(tableStorageConnectionStringDev)
        extensionSecret: $(extensionSecretDev)
        
- stage: DeployDev
  dependsOn: 
  - Build
  - InfraDev
  - SecretsDev
  condition:
    and
    (
      in(dependencies.Build.result,'Succeeded','SucceededWithIssues'),
      in(dependencies.InfraDev.result, 'Succeeded', 'Skipped'),
      in(dependencies.SecretsDev.result, 'Succeeded', 'Skipped')
    )
  displayName: DEV - Function app
  variables:
  - template: vars/dev.yml
  - template: ../sharedvars/dev.yml
  - template: ../sharedvars/variables-appsettings.yml
    parameters:
      StageEnv: dev
  jobs:
  - template: ../../templates/job/deployment-functionapp-app.yml
    parameters:
      AgentPool: ${{ variables.agentPool }}
      environment: ${{ variables.environmentCheckDev }}
      FunctionAppName: ${{ variables.functionAppName }}
      ResourceGroupName: ${{ variables.resourceGroup }}
      ServiceConnectionName: ${{ variables.azureSubscription }}
      AppSettings: >-
        ${{ variables.CommonAppSettings }}
        "azdoOrganizations=""${{variables.organizations}}"""
        "azdoPat=""${{variables.azdoPatRef}}"""
        "clientId=""${{variables.clientId}}"""
        "clientSecret=""${{variables.clientSecretRef}}"""
        "tableStorageConnectionString=""${{variables.tableStorageConnectionStringRef}}"""
        "tenantId=""${{variables.tenantId}}"""
        "extensionName=""${{variables.extensionName}}"""
        "blockUnregisteredPipelinesEnabled=""${{variables.blockUnregisteredPipelinesEnabled}}"""
        "blockIncompliantPipelinesEnabled=""${{variables.blockIncompliantPipelinesEnabled}}"""
        "throwWarningsIncompliantPipelinesEnabled=""${{variables.throwWarningsIncompliantPipelinesEnabled}}"""
        "WEBSITE_TIME_ZONE=W. Europe Standard Time"
        "WEBSITE_RUN_FROM_PACKAGE=1"
        "version=$(Build.BuildNumber)"
        "validateGatesHostName=""${{variables.validateGatesHostName}}"""
        "extensionSecret=""${{variables.extensionSecretRef}}"""
        "pipelineBreakerHubName=pipelineBreakerHub"
        "WEBSITE_ADD_SITENAME_BINDINGS_IN_APPHOST_CONFIG=1"
        "AZURE_FUNCTIONS_ENVIRONMENT=""${{ variables.AzureFunctionsEnvironment }}"""
      SlotSettings: >-
        "pipelineBreakerHubName=pipelineBreakerHubStaging"
  - template: job-pipelinebreaker-availability-tests.yml
    parameters:
      ServiceConnectionName: ${{ variables.azureSubscription }}
      ResourceGroupName: ${{ variables.resourceGroup }}
      ApplicationInsightsResourceId: /subscriptions/${{ variables.subscriptionId }}/resourceGroups/${{ variables.resourceGroup }}/providers/microsoft.insights/components/${{ variables.functionAppName }}
      TestNameAndUrlList: 
        - TestName: AvailabilityTest1
          Url: https://${{ variables.functionAppName }}.azurewebsites.net/api/pipeline-compliant/raboweb-test/e31395d3-f8ac-4ed2-9555-00a330d0b97c/440929/__default/build
        - TestName: AvailabilityTest2
          Url: https://${{ variables.functionAppName }}.azurewebsites.net/api/pipeline-compliant/raboweb-test/e31395d3-f8ac-4ed2-9555-00a330d0b97c/440930/__default/build
        - TestName: AvailabilityTest3
          Url: https://${{ variables.functionAppName }}.azurewebsites.net/api/pipeline-compliant/raboweb-test/e31395d3-f8ac-4ed2-9555-00a330d0b97c/440931/__default/build
        - TestName: AvailabilityTest4
          Url: https://${{ variables.functionAppName }}.azurewebsites.net/api/pipeline-compliant/raboweb-test/e31395d3-f8ac-4ed2-9555-00a330d0b97c/440932/__default/build
        - TestName: AvailabilityTestDiagnostics1
          Url: https://${{ variables.functionAppName }}.azurewebsites.net/api/diagnostics

- stage: SmokeTestDev
  displayName: DEV - Smoke Test
  dependsOn: 
  - DeployDev  
  condition: in(dependencies.DeployDev.result,'Succeeded','SucceededWithIssues')
  variables:
  - template: vars/dev.yml
  jobs:
  - template: ../../templates/job/smoke-test-job.yml
    parameters:
      functionAppName: ${{variables.functionAppName}}
      functions:  
      - name: diagnostics
        route: diagnostics
        method: GET


#######################################################
#  PROD
#######################################################
- template: ../../templates/stage/production-approval-stage.yml

- template: ../../templates/stage/stage-deploy-functionapp-infra.yml
  parameters:
    # Stage-level parameters
    StageId: InfraPrd
    displayName: PROD - Infra
    dependsOn: ProductionApproval
    condition: succeeded()
    environment: ${{ variables.environmentCheck }} # from global
    # Template-specific parameters
    StageEnv: prd
    FunctionAppNameBase: ${{ variables.FunctionAppBaseName }}
    # Function App Plan parameters
    Sku: EP2
    MaxBurst: 20
    # Function App parameters
    PrewarmedInstances: 9
    CountOfIdentities: ${{ variables.ManagedIdentityAmount }}

- stage: SecretsPrd
  displayName: PROD - Secrets
  dependsOn: InfraPrd
  condition: succeeded()
  variables:
  - template: vars/prd.yml
  - template: ../sharedvars/prd.yml
  jobs:
  - template: ../../templates/job/secrets-job.yml
    parameters:
      agentPool: $(agentPool)
      keyVaultName: $(keyVaultName)
      azureSubscription: ${{variables.azureSubscription}}
      secrets: 
      - name: azdoPat 
        value: $azdoPat
      - name: clientSecret
        value: $clientSecret
      - name: tableStorageConnectionString
        value: $tableStorageConnectionString
      - name: extensionSecret 
        value: $extensionSecret
      env: 
        azdoPat: $(azdoPatPrd)
        clientSecret: $(clientSecret)
        tableStorageConnectionString: $(tableStorageConnectionStringPrd)
        extensionSecret: $(extensionSecretPrd)
      environment: ${{variables.environmentCheck}}

- stage: DeployProduction
  displayName: PROD - Function app
  variables:
  - template: vars/prd.yml
  - template: ../sharedvars/prd.yml
  - template: ../sharedvars/variables-appsettings.yml
    parameters:
      StageEnv: prd
  jobs:
  - template: ../../templates/job/deployment-functionapp-app.yml
    parameters:
      AgentPool: ${{ variables.agentPool }}
      environment: ${{ variables.environmentCheck }}
      FunctionAppName: ${{ variables.functionAppName }}
      ResourceGroupName: ${{ variables.resourceGroup }}
      ServiceConnectionName: ${{ variables.azureSubscription }}
      AppSettings: >-
        ${{ variables.CommonAppSettings }}
        "azdoOrganizations=""${{variables.organizations}}"""
        "azdoPat=""${{variables.azdoPatRef}}"""
        "clientId=""${{variables.clientId}}"""
        "clientSecret=""${{variables.clientSecretRef}}"""
        "tableStorageConnectionString=""${{variables.tableStorageConnectionStringRef}}"""
        "tenantId=""${{variables.tenantId}}"""
        "extensionName=""${{variables.extensionName}}"""
        "blockUnregisteredPipelinesEnabled=""${{variables.blockUnregisteredPipelinesEnabled}}"""
        "blockIncompliantPipelinesEnabled=""${{variables.blockIncompliantPipelinesEnabled}}"""
        "throwWarningsIncompliantPipelinesEnabled=""${{variables.throwWarningsIncompliantPipelinesEnabled}}"""
        "blockPipelinesEnabled=""${{variables.blockPipelinesEnabled}}"""
        "WEBSITE_TIME_ZONE=W. Europe Standard Time"
        "WEBSITE_RUN_FROM_PACKAGE=1"
        "version=$(Build.BuildNumber)"
        "validateGatesHostName=""${{variables.validateGatesHostName}}"""
        "extensionSecret=""${{variables.extensionSecretRef}}"""
        "pipelineBreakerHubName=pipelineBreakerHub"
        "WEBSITE_ADD_SITENAME_BINDINGS_IN_APPHOST_CONFIG=1"
        "AZURE_FUNCTIONS_ENVIRONMENT=""${{ variables.AzureFunctionsEnvironment }}"""
      SlotSettings: >-
        "pipelineBreakerHubName=pipelineBreakerHubStaging"
      ClosingSteps: 
      - template: /templates/common/task/close-change-task.yml@innersourceTemplates
  - template: job-pipelinebreaker-availability-tests.yml
    parameters:
      ServiceConnectionName: ${{ variables.azureSubscription }}
      ResourceGroupName: ${{ variables.resourceGroup }}
      ApplicationInsightsResourceId: /subscriptions/${{ variables.subscriptionId }}/resourceGroups/${{ variables.resourceGroup }}/providers/microsoft.insights/components/${{ variables.functionAppName }}
      TestNameAndUrlList: 
        - TestName: AvailabilityTestDiagnostics1
          Url: https://${{ variables.functionAppName }}.azurewebsites.net/api/diagnostics
        - TestName: AvailabilityTestDiagnostics2
          Url: https://${{ variables.functionAppName }}.azurewebsites.net/api/diagnostics
        - TestName: AvailabilityTest1
          Url: https://${{ variables.functionAppName }}.azurewebsites.net/api/pipeline-compliant/raboweb/4591e69f-f66d-4ce1-a950-76da9b1ab19b/6605281/__default/build
        - TestName: AvailabilityTest2
          Url: https://${{ variables.functionAppName }}.azurewebsites.net/api/pipeline-compliant/raboweb/4591e69f-f66d-4ce1-a950-76da9b1ab19b/6609036/__default/build

- stage: SmokeTestPrd
  displayName: PROD - Smoke Test
  variables:
  - template: vars/prd.yml
  jobs:
  - template: ../../templates/job/smoke-test-job.yml
    parameters:
      functionAppName: ${{variables.functionAppName}}
      functions:  
      - name: diagnostics 
        route: diagnostics
        method: GET